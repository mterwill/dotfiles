#!/bin/bash

# Very convoluted but best way I can find to get the full path for the symlink
pushd $(pwd)/$(dirname $0) > /dev/null && SRC=$(pwd) && popd > /dev/null

pushd "$SRC" > /dev/null # work in the directory the script is in

# Git submodules are super stupid and store the configs in two places, so
# if the .gitmodules is updated it won't pull those changes in.
git config -f .gitmodules --get-regexp '^submodule\..*\.path$' |
while read path_key path; do
    url_key=$(echo $path_key | sed 's/\.path/.url/')
    url=$(git config -f .gitmodules --get "$url_key")
    git submodule add $url $path &>/dev/null # squelch "already exists in the index" messages 
done

# Pull everything from .gitmodules
git submodule update --init --recursive > /dev/null

echo "[ gitmodules ] updated"

# All of the simple thing that need a simple link
LINK="tmux.conf zshrc vimrc gitignore_global"
for f in $LINK; do
    if [ -e "$HOME/.$f" ]; then
        if [[ $* == *--overwrite* ]]; then
            echo "[ dotfiles ] $f exists – removing and relinking"
            rm "$HOME/.$f" && ln -s "$SRC/$f" "$HOME/.$f"
        else
            echo "[ dotfiles ] $f exists – skipping"
        fi
    else
        echo "[ dotfiles ] $f does not exist – linking"
        ln -s "$SRC/$f" "$HOME/.$f"
    fi
done

# Just copy the vim folder, no need to link
if [ -d "$HOME/.vim" ]; then
    if [[ $* == *--overwrite* ]]; then
        echo "[ dotfiles ] .vim exists – removing and copying"
        rm -rf "$HOME/.vim" && cp -r "$SRC/vim" "$HOME/.vim"
    else
        echo "[ dotfiles ] .vim exists – skipping"
    fi
else
    cp -r "$SRC/vim" "$HOME/.vim"
fi

# Set up git
if [[ ! -e "$HOME/.gitconfig" ]]; then
    echo "[ gitconfig ] writing basic git config"
    git config --global core.excludesfile "$SRC/.gitignore_global"
    git config --global user.name "Matthew Terwilliger"
    git config --global user.email "matt@terwilligers.com"
    git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
else
    echo "[ gitconfig ] gitconfig exists – skipping"
fi

# set up folder for our persistent bash/vim logs
echo "[ logs ] creating and setting permissions on log directories"
mkdir -p "$HOME/.logs/vim-undodir" "$HOME/.logs/bash-history"
chmod 700 "$HOME/.logs"

touch "$HOME/.profile"

popd > /dev/null
